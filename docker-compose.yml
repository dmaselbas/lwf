version: "3.3"
services:
  lwf_base: &service-common-x86
    build:
      context: ./
      dockerfile: docker/lwf.dockerfile
    image: lwf-base-x86:latest
    environment:
      RMW_IMPLEMENTATION: rmw_cyclonedds_cpp
      ROS_DOMAIN_ID: 0
    working_dir: /root/ros2_ws
    network_mode: host
    restart: unless-stopped
    profiles: [ build ]
  lwf_arm_base: &service-common-arm
    build:
      context: ./
      dockerfile: docker/lwf_arm_base.dockerfile
    image: lwf-base-arm:latest
    environment:
      RMW_IMPLEMENTATION: rmw_cyclonedds_cpp
      ROS_DOMAIN_ID: 0
    working_dir: /root/ros2_ws
    network_mode: host
    restart: unless-stopped
    profiles: [ arm-build ]
  robot_state_publisher:
    <<: *service-common-x86
    container_name: robot-state-publisher
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_robot lwf_robot.launch.py gui:=false"
    profiles: [ nuc_gen ]
    privileged: true
  imu:
    <<: *service-common-x86
    container_name: imu
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 run lwf_imu imu_publisher"
    devices:
      - "/dev/ttyACM0:/dev/ttyUSB0:rwm"
    profiles: [ nuc_gen ]
  imu_filter:
    <<: *service-common-x86
    container_name: imu-madgwick-filter
    depends_on:
      - imu
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch madgwick_filter.launch.py"
    profiles: [ nuc_gen ]
  static_transforms:
    <<: *service-common-x86
    container_name: static-transforms
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch static_transforms.launch.py"
    profiles: [ nuc_gen ]
  robot_localization:
    <<: *service-common-x86
    container_name: robot-localization
    depends_on:
      - imu
      - imu_filter
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch localization.launch.py"
    profiles: [ nuc_gen ]
  foxglox_bridge:
    <<: *service-common-x86
    container_name: foxglove-bridge
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch foxglove_bridge foxglove_bridge_launch.xml"
    profiles: [ nuc_gen ]
  lidar:
    <<: *service-common-x86
    container_name: lidar
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch lidar.launch.py"
    devices:
      - "/dev/ttyACM0:/dev/ttyUSB0:rwm"
    profiles: [ nuc_slam ]
  gps:
    <<: *service-common-x86
    container_name: gps
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch gps.launch.py"
    devices:
      - "/dev/ttyACM1:/dev/ttyUSB0:rwm"
    profiles: [ nuc_gen ]
  usb_cams:
    <<: *service-common-x86
    container_name: usb-cams
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch usb_cam.launch.py"
    devices:
      - "/dev/video0:/dev/video0:rwm"
      - "/dev/video1:/dev/video1:rwm"
    profiles: [ nuc_rpi ]
  esp32_interface:
    <<: *service-common-x86
    container_name: esp32_interface
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 run lwf_esp32_interface motor_controller"
    devices:
      - "/dev/ttyACM1:/dev/ttyUSB0:rwm"
    profiles: [ nuc_slam ]
  slam:
    <<: *service-common-x86
    container_name: slam
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ln -s /root/.ros2/maps /opt/maps
          ros2 launch lwf_launch slam.launch.py"
    profiles: [ nuc_slam ]
    depends_on:
      - realsense
    volumes:
      - "/home/ros2/maps:/root/.ros2/maps:rw"
  realsense:
    <<: *service-common-x86
    container_name: realsense
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 run realsense2_camera realsense2_camera_node --ros-args -p color_width:=640 -p color_height:=480 -p color_fps:=24 -p depth_width:=640 -p depth_height:=480 -p depth_fps:=24 -p enable_color:=true -p enable_depth:=true -p align_depth.enable:=true -p enable_sync:=true -p pointcloud.enable:=true"
    profiles: [ nuc_slam ]
    volumes:
      - "/dev:/dev:rwm"
    privileged: true
  slam_viz:
    <<: *service-common-x86
    container_name: slam-viz
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch slam_viz.launch.py"
    profiles: [ vm ]
  joy_teleop:
    <<: *service-common-x86
    container_name: joy-teleop
    image: husarion/teleop-twist-joy:humble-2.4.5-20240318
    devices:
      - /dev/input
    volumes:
      - ./ros2_ws/src/lwf_launch/config/:/config/
    command: ros2 run joy joy_node --ros-args --params-file /config/joy_params.yaml
    profiles: [ vm ]
  micro_ros_agent:
    <<: *service-common-arm
    container_name: micro-ros-agent
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          rm -rf /root/ros2_ws/src/lwf_* &&
          ros2 run micro_ros_setup create_agent_ws.sh &&
          ros2 run micro_ros_setup build_agent.sh &&
          source install/local_setup.sh &&
          ros2 run micro_ros_agent micro_ros_agent serial --dev /dev/ttyUSB0"
    devices:
      - "/dev/ttyUSB0:/dev/ttyUSB0:rwm"
