---
- name: Deploy ROS 2 nodes using Docker containers
  hosts: all
  become: yes
  vars:
    docker_image: "192.168.5.239:5000/lwf:latest"
    ros_environment:
      RMW_IMPLEMENTATION: rmw_cyclonedds_cpp
      ROS_DOMAIN_ID: "0"
      ROS_VERSION: "2"
      ROS_DISTRO: humble

  tasks:
    - name: Ensure Docker is installed
      apt:
        name: docker.io
        state: present
      become: yes

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: true
      become: yes

    - name: Pull Docker image if needed
      docker_image:
        name: "{{ docker_image }}"
        source: pull
      become: yes

    #################################################################
    # SBC1 Nodes
    #################################################################
    - name: Start RTAB-Map node on lwf-node1
      docker_container:
        name: rtabmap_ros
        image: "{{ docker_image }}"
        command: > 
          ros2 launch rtabmap_launch rtabmap.launch.py
          /camera/color/image_raw:=/camera/camera/color/image_raw
          /camera/depth/image_rect_raw:=/camera/camera/depth/image_rect_raw
          /camera/rgbd:=/camera/camera/rgbd
          /camera/color/camera_info:=/camera/camera/color/camera_info
          /camera/depth/camera_info:=/camera/camera/depth/camera_info
          frame_id:=camera_link
          odom_frame_id:=odom
          rgbd_sync:=true
          approx_sync:=true
          rgbd_topic:=/camera/rgbd
          rgb_topic:=/camera/color/image_raw
          depth_topic:=/camera/depth/image_rect_raw
          camera_info_topic:=/camera/color/camera_info
          depth_camera_info_topic:=/camera/depth/camera_info
        network_mode: host
        restart_policy: unless-stopped
        pull: true
        recreate: true
        env: "{{ ros_environment }}"
      when: inventory_hostname == 'lwf-node1'

    - name: Start realsense2_camera node on lwf-node1
      docker_container:
        name: realsense2_camera
        image: "{{ docker_image }}"
        command: >
          ros2 launch realsense2_camera rs_launch.py
          enable_color:=true
          enable_sync:=true
          enable_rgbd:=true
          enable_depth:=true
          enable_gyro:=true
          initial_reset:=true
          align_depth.enable:=true
        device_cgroup_rules:
          - 'c 81:* rmw'
          - 'c 189:* rmw'
        devices:
          - "/dev/bus/usb:/dev/bus/usb"
        privileged: true
        network_mode: host
        restart_policy: unless-stopped
        pull: true
        recreate: true
        env: "{{ ros_environment }}"
      when: inventory_hostname == 'lwf-node1'


#    - name: Start PTZ Controller node on lwf-node3
#      docker_container:
#        name: ptz_controller
#        image: "{{ docker_image }}"
#        command: ros2 launch ptz_controller ptz_controller.launch.py
#        devices:
#          - "/dev/ttyUSB0:/dev/ttyUSB0"
#        privileged: true
#        network_mode: host
#        environment: "{{ ros_environment }}"
#        restart_policy: unless-stopped
#        pull: true
#      when: inventory_hostname == 'lwf-node3'

    #################################################################
    # SBC2 Nodes
    #################################################################

    - name: Start USB camera node on lwf-node2
      docker_container:
        name: usb_cam_node
        image: "{{ docker_image }}"
        command: ros2 launch usb_cam usb_cam_launch.py
        devices:
          - "/dev/video0:/dev/video0"
        privileged: true
        network_mode: host
        restart_policy: unless-stopped
        pull: true
        recreate: true
        force_kill: true
        env: "{{ ros_environment | string}}"
      when: inventory_hostname == 'lwf-node2'

#    - name: Start Edge TPU Object Detection node on sbc2
#      docker_container:
#        name: edge_tpu_object_detection
#        image: "{{ docker_image }}"
#        command: ros2 launch edge_tpu_object_detection object_detection.launch.py
#        devices:
#          - "/dev/bus/usb:/dev/bus/usb"
#        privileged: true
#        network_mode: host
#        environment: "{{ ros_environment }}"
#        restart_policy: unless-stopped
#        pull: true
#      when: inventory_hostname == 'lwf-node2'


    #################################################################
    # lwf-node3
    #################################################################
#    - name: Start Differential Drive Controller node on lwf-node3
#      docker_container:
#        name: diff_drive_controller
#        image: "{{ docker_image }}"
#        command: ros2 launch diff_drive_controller diff_drive_controller.launch.py
#        volumes:
#          - "/path/to/diff_drive_controller/config:/config:ro"
#        network_mode: host
#        restart_policy: unless-stopped
#        pull: true
#      when: inventory_hostname == 'lwf-node3'

#    - name: Start Serial Bridge for ESP32
#      docker_container:
#        name: serial_bridge_esp32
#        image: "{{ docker_image }}"
#        command: ros2 launch serial_bridge serial_bridge.launch.py
#        devices:
#          - "/dev/ttyUSB0:/dev/ttyUSB1"
#        privileged: true
#        network_mode: host
#        restart_policy: unless-stopped
#        pull: true
#      when: inventory_hostname == 'lwf-node3'

    - name: Start node for IMU
      docker_container:
        name: imu
        image: "{{ docker_image }}"
        command: ros2 launch shit_imu wit_imu.launch port:=/dev/ttyUSB0 baud:=115200
        devices:
          - "/dev/ttyUSB0:/dev/ttyUSB0"
        privileged: true
        network_mode: host
        restart_policy: unless-stopped
        pull: true
        recreate: true
        force_kill: true
        env: "{{ ros_environment | string}}"
      when: inventory_hostname == 'lwf-node3'

    - name: Start node for LiDAR
      docker_container:
        name: lidar
        image: "{{ docker_image }}"
        command: ros2 launch rplidar_ros rplidar_c1.launch serial_port:=/dev/ttyS7"
        devices:
          - "/dev/ttyS7:/dev/ttyS7"
        privileged: true
        network_mode: host
        restart_policy: unless-stopped
        pull: true
        recreate: true
        force_kill: true
        env: "{{ ros_environment | string}}"
      when: inventory_hostname == 'lwf-node3'
#    - name: Start IMU Fusion node on lwf-node3
#      docker_container:
#        name: imu_fusion_node
#        image: "{{ docker_image }}"
#        command: ros2 launch robot_localization ekf.launch.py
#        volumes:
#          - "/path/to/robot_localization/config:/config:ro"
#        network_mode: host
#        environment: "{{ ros_environment }}"
#        restart_policy: unless-stopped
#        pull: true
#      when: inventory_hostname == 'lwf-node3'

    - name: Start Robot State Publisher node on lwf-node3
      docker_container:
        name: robot_state_publisher
        image: "{{ docker_image }}"
        command: ros2 launch robot_state_publisher robot_state_publisher.launch.py
        volumes:
          - "/path/to/urdf:/urdf:ro"
        network_mode: host
        privileged: true
        restart_policy: unless-stopped
        pull: true
        recreate: true
        force_kill: true
        env: "{{ ros_environment | string}}"
      when: inventory_hostname == 'lwf-node3'

    - name: Start Joint State Publisher node on lwf-node3
      docker_container:
        name: joint_state_publisher
        image: "{{ docker_image }}"
        command: ros2 launch joint_state_publisher joint_state_publisher.launch.py
        network_mode: host
        privileged: true
        restart_policy: unless-stopped
        pull: true
        recreate: true
        force_kill: true
        env: "{{ ros_environment | string}}"
      when: inventory_hostname == 'lwf-node3'

    #################################################################
    # SBC4 Nodes
    #################################################################
    - name: Start Navigation 2 stack on sbc4
      docker_container:
        name: nav2_stack
        image: "{{ docker_image }}"
        command: ros2 launch nav2_bringup navigation_launch.py
        volumes:
          - "/path/to/nav2/maps:/maps:ro"
          - "/path/to/nav2/config:/config:ro"
        network_mode: host
        restart_policy: unless-stopped
        pull: true
        recreate: true
        force_kill: true
        env: "{{ ros_environment | string}}"
      when: inventory_hostname == 'lwf-node4'

    #################################################################
    # VM Nodes
    #################################################################
    - name: Start RViz 2 on VM
      docker_container:
        name: rviz2
        image: "{{ docker_image }}"
        command: ros2 run rviz2 rviz2
        network_mode: host
        volumes:
          - "/tmp/.X11-unix:/tmp/.X11-unix"
        environment:
          DISPLAY: "${DISPLAY}"
          RMW_IMPLEMENTATION: rmw_cyclonedds_cpp
          ROS_DOMAIN_ID: "0"
        devices:
          - "/dev/dri:/dev/dri"
        privileged: true
        restart_policy: unless-stopped
      when: inventory_hostname == 'vm'

    - name: Start Teleoperation node on VM
      docker_container:
        name: teleop_node_vm
        image: "{{ docker_image }}"
        command: ros2 launch teleop_twist_keyboard teleop_twist_keyboard.launch.py
        network_mode: host
        environment: "{{ ros_environment }}"
        restart_policy: unless-stopped
      when: inventory_hostname == 'vm'

    #################################################################
    # Common Nodes (if any)
    #################################################################
    # Add additional nodes that run on all hosts or specific hosts as needed
