name: lwf_robot
services:
  lwf_base: &service-common
    build:
      context: ./
      dockerfile: docker/lwf.dockerfile
    image: lwf_base:latest
    environment:
      RMW_IMPLEMENTATION: rmw_cyclonedds_cpp
      ROS_DOMAIN_ID: 0
    working_dir: /root/ros2_ws
    network_mode: host
    restart: unless-stopped
  robot_state_publisher:
    <<: *service-common
    container_name: robot-state-publisher
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_robot lwf_robot.launch.py gui:=false"
    profiles: [ nuc_gen ]
  imu:
    <<: *service-common
    container_name: imu
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 run lwf_imu imu_publisher"
    devices:
      - "/dev/serial:/dev/ttyUSB0:rwm"
    profiles: [ nuc_gen ]
  imu_filter:
    <<: *service-common
    container_name: imu-madgwick-filter
    depends_on:
      - imu
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch madgwick_filter.launch.py"
    profiles: [ nuc_gen ]
  robot_localization:
    <<: *service-common
    container_name: robot-localization
    depends_on:
      - imu
      - imu_filter
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch localization.launch.py"
    profiles: [ nuc_gen ]
  foxglox_bridge:
    <<: *service-common
    container_name: foxglove-bridge
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch foxglove_bridge foxglove_bridge_launch.xml"
    profiles: [ nuc_gen ]
  lidar:
    <<: *service-common
    container_name: lidar
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch lidar.launch.py"
    devices:
      - "/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_B00465V5-if00-port0:/dev/ttyUSB0:rwm"
    profiles: [ nuc_gen ]
  gps:
    <<: *service-common
    container_name: gps
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch gps.launch.py"
    devices:
      - "/dev/serial/by-id/usb-Prolific_Technology_Inc._USB-Serial_Controller_D-if00-port0:/dev/ttyUSB0:rwm"
    profiles: [ nuc_gen ]
  usb_cams:
    <<: *service-common
    container_name: usb-cams
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch usb_cam.launch.py"
    devices:
      - "/dev/video0:/dev/video0:rwm"
      - "/dev/video1:/dev/video1:rwm"
    profiles: [ nuc_gen ]
  slam:
    <<: *service-common
    container_name: slam
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch slam.launch.py"
    profiles: [ nuc_slam ]
    depends_on:
      - realsense
    volumes:
      - type: bind
        source: /opt/maps
        target: /opt/maps
  realsense:
    <<: *service-common
    container_name: realsense
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 run realsense2_camera realsense2_camera_node --ros-args -p color_width:=640 -p color_height:=480 -p color_fps:=24 -p depth_width:=640 -p depth_height:=480 -p depth_fps:=24 -p enable_color:=true -p enable_depth:=true -p align_depth.enable:=true -p enable_sync:=true -p pointcloud.enable:=true"
    profiles: [ nuc_slam ]
  slam_viz:
    <<: *service-common
    container_name: slam-viz
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch slam_viz.launch.py"
    profiles: [ vm ]
  joy_teleop:
    <<: *service-common
    container_name: joy-teleop
    command: >
      bash -c "/ros_entrypoint.sh &&
          source install/setup.bash &&
          ros2 launch lwf_launch joy.launch.py"
    devices:
      - "/dev/input/js0:/dev/input/js0:rwm"
    profiles: [ vm ]
